#include <iostream>
#include<list>
using namespace std;

struct Node{
    // A node will 2 entities
    //1. data type int called label
    int label;
    //2. a int type list called neighbours
    list<int> neighbours;

};

struct Graph{
    //graph will have an array of type "node" with length specified by n
    int n=8;
    Node * nodes = new Node[n];

    void intializenodes(){
        //iterate through the nodes and assign labels
        for(int i=0;i<n;i++){
            nodes[i].label=i;
        }
    }

    void addedge(int u, int v){
        //select node u and push v into u's neighbour
        nodes[u-1].neighbours.push_back(v);
        //select node v and push u into v's neighbour
        nodes[v-1].neighbours.push_back(u);
    }

    // void addedge(int u, int v){
    //     //u is directed towards v, so v is a neighbor of u, but u is not a neighbour of v
    //     nodes[u-1].neighbours.push_back(v);
    // }

    void print(){
        //lets iterate through each node and print its neighbours
        for (int i=0; i<n; i++) {
            cout << "Neighbours of node " << i+1 << " : ";
            for (int nb : (nodes[i]).neighbours) {
                cout << nb << " ";
            }
            cout << "\n";
        }
    }
};

int main() {
    Graph * g = new Graph;
    g->intializenodes();
    //add edgesj for the graphs here.
    g->addedge(1,2);
    g->addedge(1,3);    
    g->addedge(1,4);
    g->addedge(1,5);
    g->addedge(2,3);
    g->addedge(2,6);
    g->addedge(4,6);
    g->addedge(4,7);
    g->addedge(4,8);
    g->addedge(5,6);
    g->addedge(5,7);
    g->addedge(5,8);
    //print the graph adjaceny list
    g->print();
}
